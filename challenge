using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Azure;
using Azure.AI.OpenAI;

namespace OpenAI_Chat
{
    class Program
    {
        public static void Main()
        {
            try
            {
                Utils.InitLog();
                IConfiguration config = new ConfigurationBuilder()
                    .AddJsonFile("appsettings.json")
                    .Build();

                string oaiEndpoint = config["AzureOAIEndpoint"] ?? "";
                string oaiKey = config["AzureOAIKey"] ?? "";
                string oaiModelName = config["AzureOAIModelName"] ?? "";

                var client = new OpenAIClient(new Uri(oaiEndpoint), new AzureKeyCredential(oaiKey));

                var functions = new Dictionary<int, Action<OpenAIClient, string>>
                {
                    { 1, function1 },
                    { 2, function2 },
                    { 3, function3 },
                    { 4, function4 }
                };

                while (true)
                {
                    Console.WriteLine("1: Validate PoC\n" +
                                      "2: Company chatbot\n" +
                                      "3: Developer tasks\n" +
                                      "4: Use company data\n" +
                                      "'quit' to exit the program\n");
                    string userInput = (Console.ReadLine() ?? "").Trim().ToLower();

                    if (userInput == "quit")
                    {
                        break;
                    }

                    if (int.TryParse(userInput, out int inputKey) && functions.ContainsKey(inputKey))
                    {
                        functions[inputKey](client, oaiModelName);
                    }
                    else
                    {
                        Console.WriteLine("Invalid input. Please enter number 1, 2, 3, or 4.");
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }

        // Task 1: Validate PoC
        static async void function1(OpenAIClient client, string oaiModelName)
        {
            var promptInput = Utils.GetPromptInput("Task 1: Validate PoC\n", "sample-text.txt");

            var messages = new[]
            {
                new { Role = "system", Content = "You are a helpful assistant" },
                new { Role = "user", Content = promptInput }
            };

            var options = new ChatCompletionsOptions
            {
                Messages = new List<ChatMessage>
                {
                    new ChatMessage("system", "You are a helpful assistant"),
                    new ChatMessage("user", promptInput)
                },
                MaxTokens = 800,
                Temperature = (float)0.7,
                NucleusSamplingFactor = (float)0.95,
                FrequencyPenalty = 0,
                PresencePenalty = 0
            };

            Utils.WriteLog("API Parameters: ", options);

            var response = await client.GetChatCompletionsAsync(oaiModelName, options);

            Utils.WriteLog("Response:\n", response);
            Console.WriteLine("Response: " + response.Choices[0].Message.Content + "\n");
        }

        // Task 2: Company chatbot
        static async void function2(OpenAIClient client, string oaiModelName)
        {
            var promptInput = Utils.GetPromptInput("Task 2: Company chatbot\n", "sample-text.txt");

            var options = new ChatCompletionsOptions
            {
                Messages = new List<ChatMessage>
                {
                    new ChatMessage("system", "You are a helpful AI bot who answers user questions in both English and Spanish. Each response must be in a casual tone and end with 'Hope that helps! Thanks for using Contoso, Ltd.'"),
                    new ChatMessage("user", promptInput)
                },
                MaxTokens = 1000,
                Temperature = (float)0.5
            };

            Utils.WriteLog("API Parameters: ", options);

            var response = await client.GetChatCompletionsAsync(oaiModelName, options);

            Utils.WriteLog("Response:\n", response);
            Console.WriteLine("Response: " + response.Choices[0].Message.Content + "\n");
        }

        // Task 3: Developer tasks
        static async void function3(OpenAIClient client, string oaiModelName)
        {
            var promptInput = Utils.GetPromptInput("Task 3: Developer tasks\n", "sample-text.txt");
            var legacyCodePath = "C:\\files\\legacyCode.py";
            var fibonacciPath = "C:\\files\\fibonacci.py";
            var promptPath = "C:\\files\\AzureOpenAIPoc\\Python\\sample-text.txt";

            var tasks = new Dictionary<string, (string filePath, string taskInstructions)>
            {
                { "1", (legacyCodePath, "Add comments to the following legacy code and generate documentation.\n---\n") },
                { "2", (fibonacciPath, "Generate five unit tests for the function in the following code.\n---\n") }
            };

            string basePrompt = File.ReadAllText(promptPath).Trim();

            foreach (var task in tasks.Values)
            {
                string fileContent = File.ReadAllText(task.filePath);

                string prompt = (basePrompt + "\n" + task.taskInstructions + fileContent).Trim();

                var options = new ChatCompletionsOptions
                {
                    Messages = new List<ChatMessage>
                    {
                        new ChatMessage("user", prompt)
                    },
                    MaxTokens = 1000,
                    Temperature = (float)0.7
                };

                Utils.WriteLog("API Parameters: ", options);

                var response = await client.GetChatCompletionsAsync(oaiModelName, options);

                Utils.WriteLog("Response:\n", response);
                Console.WriteLine("Response: " + response.Choices[0].Message.Content + "\n");
            }
        }

        // Task 4: Use company data
        static async void function4(OpenAIClient client, string oaiModelName)
        {
            var promptInput = Utils.GetPromptInput("Task 4: Use company data\n", "sample-text.txt");

            var options = new ChatCompletionsOptions
            {
                Messages = new List<ChatMessage>
                {
                    new ChatMessage("system", "You are a helpful travel agent."),
                    new ChatMessage("user", promptInput)
                },
                MaxTokens = 1000,
                Temperature = (float)0.5
            };

            Utils.WriteLog("API Parameters: ", options);

            var response = await client.GetChatCompletionsAsync(oaiModelName, options);

            Utils.WriteLog("Response:\n", response);
            Console.WriteLine("Response: " + response.Choices[0].Message.Content + "\n");
        }
    }
}

